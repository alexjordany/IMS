@page "/products"

@inject IMediator _mediator;
@inject NavigationManager _navigationManager

<h3>Products List</h3>
<br />

<GetProductsComponent OnSearchProducts="OnSearchProducts"></GetProductsComponent>

<FluentDataGrid TItem=string GenerateHeader=GenerateHeaderOptions.None GridTemplateColumns="1fr 0.8fr 1fr 4fr">
    <FluentDataGridRow TItem=string RowType=DataGridRowType.Header >
        <FluentDataGridCell GridColumn=1 CellType=DataGridCellType.ColumnHeader>Name</FluentDataGridCell>
        <FluentDataGridCell GridColumn=2 CellType=DataGridCellType.ColumnHeader>Quantity</FluentDataGridCell>
        <FluentDataGridCell GridColumn=3 CellType=DataGridCellType.ColumnHeader>Price</FluentDataGridCell>
        <FluentDataGridCell GridColumn=4 CellType=DataGridCellType.ColumnHeader>Options</FluentDataGridCell>
    </FluentDataGridRow>
    @foreach (var product in this._products)
        {
            <ProductItemComponent Product="product"></ProductItemComponent>
        }
</FluentDataGrid>

@code {
    private List<GetProductsByNameVM> _products;

    protected override async Task OnInitializedAsync()
    {
        var model = await _mediator.Send(new GetProductsByNameQuery { Name = "" });
        _products = model;
    }

    private void OnSearchProducts(List<GetProductsByNameVM> products)
    {
        _products = products;
    }

    private void CreateProduct()
    {
        _navigationManager.NavigateTo("/createproduct");
    }

}
