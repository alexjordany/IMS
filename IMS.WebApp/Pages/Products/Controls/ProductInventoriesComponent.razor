@using IMS.Domain.Entities
@using AutoMapper

<div class="form-group">
    <label>Inventories</label>
    <SearchInventoryComponent DisplaySearchResult="true" OnSelectInventory="OnSelectInventory"></SearchInventoryComponent>
</div>

@if (productInventories != null && productInventories.Count > 0)
{
    <div style="width:550px;">
        <fluent-data-grid grid-template-columns="1.5fr 1fr 1fr" generate-header="none">
            <fluent-data-grid-row row-type="header">
                <fluent-data-grid-cell grid-column="1" cell-type="columnheader">Name</fluent-data-grid-cell>
                <fluent-data-grid-cell grid-column="2" cell-type="columnheader">Quantity</fluent-data-grid-cell>
                <fluent-data-grid-cell grid-column="3" cell-type="columnheader">Options</fluent-data-grid-cell>
            </fluent-data-grid-row>
            @foreach (var productInventories in this.productInventories)
            {
                <fluent-data-grid-row>
                    <fluent-data-grid-cell grid-column="1">@productInventories.Inventory.InventoryName</fluent-data-grid-cell>
                    <fluent-data-grid-cell grid-column="2">
                        <fluent-number-field size=5 min="0"
                                     @bind-value="productInventories.InventoryQuantity"
                                     @bind-value:event="oninput"
                                     @onchange="OnInventoryQtyChanged"></fluent-number-field>
                    </fluent-data-grid-cell>
                    <fluent-data-grid-cell grid-column="3">
                        <fluent-button appearance="outline" @onclick="@(()=>RemoveInventory(productInventories))">Remove</fluent-button>
                    </fluent-data-grid-cell>
                </fluent-data-grid-row>
            }
        </fluent-data-grid>
    </div>
    


}

@code {
    [Parameter]
    public EventCallback<List<ProductInventory>> OnInventorySelected { get; set; }

    public List<ProductInventory> productInventories = new List<ProductInventory>();

    private async Task OnInventoryQtyChanged()
    {
        await OnInventorySelected.InvokeAsync(this.productInventories);
    }

    private readonly IMapper mapper;

    private async void OnSelectInventory(ViewInventoriesByNameVM inventory)
    {
        if (!productInventories.Any(x => x.Inventory.InventoryName.Equals(inventory.InventoryName, StringComparison.OrdinalIgnoreCase)))
        {
            this.productInventories.Add(new ProductInventory { InventoryId = inventory.InventoryId, Inventory = ConvertViewModelToModel(inventory)});
        }

        await OnInventorySelected.InvokeAsync(this.productInventories);
    }

    private Inventory ConvertViewModelToModel(ViewInventoriesByNameVM vm)
    {
        return new Inventory()
            {
                InventoryName = vm.InventoryName,
                Price = vm.Price,
                Quantity = vm.Quantity,
                ProductInventories = vm.ProductInventories
            };
    }


    private void RemoveInventory(ProductInventory productInventory)
    {
        this.productInventories.Remove(productInventory);
    }
}
