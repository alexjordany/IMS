@page "/updateinventory/{invId:int}"
@using IMS.Application.Features.Inventories.Queries.GetInventoryDetail
@inject IMediator _mediator;

<h3>Update Inventory</h3>
<br />
@if (inventory != null)
{
    <EditForm Model="inventory">
        <FluentValidationValidator></FluentValidationValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
        </div>
        <br />
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
        </div>
        <br />
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int InvId { get; set; }

    private InventoryDetailVm inventory;

    protected override async Task OnInitializedAsync()
    {
        //inventory = new ViewInventoriesByIdQuery() { Id = InvId };
        //await _mediator.Send(getInventory);
        var model = await _mediator.Send(new GetInventoryDetailQuery{Id = InvId});
        inventory = model;

    }

    //var model = await _mediator.Send(new ViewInventoriesByNameQuery{ Name = "" });
    //    _inventories = model;

    //public async Task OnValidSubmit()
    //{
    //    if(inventory != null)
    //        await _mediator.Send(inventory);
    //}
}
