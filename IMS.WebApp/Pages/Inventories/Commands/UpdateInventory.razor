@page "/updateinventory/{invId:int}"
@using IMS.Application.Features.Inventories.Queries.GetInventoryDetail
@inject IMediator _mediator;
@inject NavigationManager _navigationManager

<h3>Update Inventory</h3>
<br />
@if (inventory != null)
{
    <EditForm Model="inventory" OnValidSubmit="OnValidSubmit">
        <FluentValidationValidator></FluentValidationValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <FluentTextField Size=75 Spellcheck=true  Placeholder="Name" id="name" @bind-Value="inventory.InventoryName">Name</FluentTextField>
        </div>
        <br />
        <div class="form-group">
            <FluentNumberField Size=75 id="qty" @bind-Value="inventory.Quantity">Quantity</FluentNumberField>
        </div>
        <br />
        <div class="form-group">
            <FluentNumberField Size=75 id="price" @bind-Value="inventory.Price">Price</FluentNumberField>
        </div>
        <br />
        <FluentButton Appearance=Appearance.Outline type="submit">Save</FluentButton>
    </EditForm>
}

@code {
    [Parameter]
    public int InvId { get; set; }

    private InventoryDetailVm inventory;

    protected override async Task OnInitializedAsync()
    {
        var model = await _mediator.Send(new GetInventoryDetailQuery{Id = InvId});
        inventory = model;
    }

    public async Task OnValidSubmit()
    {
        if(inventory != null)
        {
            await _mediator.Send(new UpdateInventoryCommand 
            { InventoryId = inventory.InventoryId, InventoryName = inventory.InventoryName, Price = inventory.Price, Quantity = inventory.Quantity });
            _navigationManager.NavigateTo("/inventories");
        }
        
            

    }
}
