@page "/createinventory"
@inject IMediator _mediator
@inject NavigationManager _navigationManager

<h3>Add Inventory</h3>
<br />
@if (inventory != null)
{
    <EditForm Model="inventory" OnValidSubmit="OnValidSubmit">
        <FluentValidationValidator></FluentValidationValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <FluentTextField Size=75 Spellcheck=true  Placeholder="Name" id="name" @bind-Value="inventory.InventoryName">Name</FluentTextField>
        </div>
        <br />
        <div class="form-group">
            <FluentNumberField Size=75 id="qty" @bind-Value="inventory.Quantity" Min="0">Quantity</FluentNumberField>
        </div>
        <br />
        <div class="form-group">
            <FluentNumberField Size=75 id="price" @bind-Value="inventory.Price" Min="0">Price</FluentNumberField>
        </div>
        <br />
        <FluentButton Appearance=Appearance.Accent type="submit">Save</FluentButton>
    </EditForm>
}

@code {
    private CreateInventoryCommand inventory;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        inventory = new CreateInventoryCommand();

    }

    private async Task OnValidSubmit()
    {
        if(inventory != null)
        {
             var model = await _mediator.Send(inventory);
            _navigationManager.NavigateTo("/inventories");
        }
    }
}
