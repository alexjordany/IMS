@page "/createinventory"
@inject IMediator _mediator
@inject NavigationManager _navigationManager

<h3>Add Inventory</h3>
<br />
@if (inventory != null)
{
    <EditForm Model="inventory" OnValidSubmit="OnValidSubmit">
        <FluentValidationValidator></FluentValidationValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
        </div>
        <br />
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
        </div>
        <br />
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private CreateInventoryCommand inventory;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        inventory = new CreateInventoryCommand();

    }

    private async Task OnValidSubmit()
    {
        if(inventory != null)
        {
             var model = await _mediator.Send(inventory);
            _navigationManager.NavigateTo("/inventories");
        }
    }
}
