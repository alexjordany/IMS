@page "/inventories"
@inject IMediator _mediator;
@inject NavigationManager _navigationManager
<h3>Inventory List</h3>
<br />
<ViewInventoriesComponent OnSearchInventories="OnSearchInventories"></ViewInventoriesComponent>
@if(_inventories != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var inv in this._inventories)
            {
                <tr>
                    <td>@inv.InventoryName</td>
                    <td>@inv.Quantity</td>
                    <td>@inv.Price.ToString("c")</td>
                    <td>
                        <FluentButton Appearance=Appearance.Outline @onclick="@(()=> UpdateInventory(inv.InventoryId))">Edit</FluentButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<br />

<FluentButton Appearance=Appearance.Accent @onclick="CreateInventory">Add Inventory</FluentButton>




@code {
    private List<ViewInventoriesByNameVM> _inventories;

    protected override async Task OnInitializedAsync()
    {
        var model = await _mediator.Send(new ViewInventoriesByNameQuery{ Name = "" });
        _inventories = model;
    }

    private void OnSearchInventories(List<ViewInventoriesByNameVM> inventories)
    {
        _inventories = inventories;
    }

    private void CreateInventory()
    {
        _navigationManager.NavigateTo("/createinventory");
    }

    private void UpdateInventory(int invId)
    {
        _navigationManager.NavigateTo($"/updateinventory/{invId}");
    }
}
