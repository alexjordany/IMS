@page "/inventories"
@inject IMediator _mediator;
@inject NavigationManager _navigationManager
<h3>Inventory List</h3>
<br />
<ViewInventoriesComponent OnSearchInventories="OnSearchInventories"></ViewInventoriesComponent>

<FluentDataGrid TItem=string GenerateHeader=GenerateHeaderOptions.None GridTemplateColumns="1fr 1fr 1fr 2fr">
    <FluentDataGridRow TItem=string RowType=DataGridRowType.Header >
        <FluentDataGridCell GridColumn=1 CellType=DataGridCellType.ColumnHeader>Name</FluentDataGridCell>
        <FluentDataGridCell GridColumn=2 CellType=DataGridCellType.ColumnHeader>Quantity</FluentDataGridCell>
        <FluentDataGridCell GridColumn=3 CellType=DataGridCellType.ColumnHeader>Price</FluentDataGridCell>
        <FluentDataGridCell GridColumn=4 CellType=DataGridCellType.ColumnHeader>Options</FluentDataGridCell>
    </FluentDataGridRow>
    @foreach (var inv in this._inventories)
        {
            <InventoryItemComponent Inventory="inv"></InventoryItemComponent>
        }
</FluentDataGrid>

<br />

<FluentButton Appearance=Appearance.Accent @onclick="CreateInventory">Add Inventory</FluentButton>




@code {
    private List<ViewInventoriesByNameVM> _inventories;

    protected override async Task OnInitializedAsync()
    {
        var model = await _mediator.Send(new ViewInventoriesByNameQuery{ Name = "" });
        _inventories = model;
    }

    private void OnSearchInventories(List<ViewInventoriesByNameVM> inventories)
    {
        _inventories = inventories;
    }

    private void CreateInventory()
    {
        _navigationManager.NavigateTo("/createinventory");
    }
}
